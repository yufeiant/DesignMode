package com.feiyu.command_pattern;
/**
 * 貌似好几天没有更新设计模式的代码了，这几天确实是有所懈怠，现在还是要拾起来，每天努力一点
 * 点，然后，等所有的设计模式写完后，在找几个经典的设计模式写几篇博客出来，然后也推广一下自己
 * ，哈哈，贾胖胖，加油。
 * 命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队
 * 或记录请求日志，以及支持可撤销的操作。
 * 
 * 命令模式的优点：
 * 1):它能较容易的设计一个命令队列：
 * 2):在需要的情况下，可以比较容易的命令记入日志；
 * 3):在允许请求的一放决定是否要否决请求；
 * 4):可以容易地实现请求的撤销和重做；
 * 5):由于加进新的具体命令类不影响其他的类，因此添加新的具体命令类很容易
 * 
 * 在这里，我们把单独的命令类抽象了出来，这样就和操作这个命令的对象分离开来了，其实也就是
 * 最重要的优点：
 * 命令模式把请求一个操作的对象与指导怎么执行一个操作对象分隔开。
 * @author feiyu
 *
 */
public class Main {

	public static void main(String[] args) {
		Receiver r = new Receiver();
		Command c = new ConcreteCommand(r);
		Invoker i = new Invoker();
		i.setCommand(c);
		i.ExcecuteCommand();

	}

}
