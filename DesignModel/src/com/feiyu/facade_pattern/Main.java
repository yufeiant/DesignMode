package com.feiyu.facade_pattern;
/**
 * 外观模式--也叫门面模式 
 * 为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得这一子系统
 * 更加容易使用。
 * 
 * 这个模式完美的体现了迪米特法则和依赖倒转原则的思想，这里我们复习一下这两个法则：
 * 迪米特法则：
 * 如果两个类不必彼此直接通信，那么这两个类就不应当发生直接的相互作用，如果其中一个类需要调用
 * 另一个类的某一个方法的话，可以通过第三者转发这个调用。
 * 迪米特法则其根本思想，是强调了类之间的松耦合。类之间的耦合余越弱，越有利于复用，一个处在弱
 * 耦合的类被修改，不会对其有关系的类造成波及。也就是说，信息的隐藏促进了软件的复用。
 * 比如：书中的例子，没有熟人难办事啊，第一天进公司，去找人事部报名，然后去电脑部领电脑，
 * 如果人事部的小李带着你去找电脑部的小王弄电脑，结果小王出去忙了，而电脑部还有其他的人
 * ，可是其他人一看你这个事是找小王的，就不给你弄了，也就是说，在这里，你和小王发生了直接的调用，
 * 但是你只是来电脑部领电脑，对于一个新来的人来说，你只是需要拿电脑这件事，你不应该去找小王，
 * 而是去找电脑部的主管，然后主管会把这个活具体的分派给可以帮你拿电脑的人，因为领导知道
 * 哪个人是闲的，可以给你拿，哪个是忙的，办不了，而你直接找小王，小王忙着呢，就直接歇菜了
 * 迪米特原则的思想面向接口编程，而不是去直接调用哪个类，因为你不知道哪个类有可能就被改了
 * 或者是被辞退了，这样在你去调用具体的功能时，不会因为某个同事离职而造成你办不了事的情况。
 * 
 * 依赖倒转原则：
 * A:高层模块不应该依赖底层模块，两个都应该依赖抽象。
 * B:抽象不应该依赖细节，细节应该依赖抽象。
 * 
 * 
 * @author feiyu
 *
 */
public class Main {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
