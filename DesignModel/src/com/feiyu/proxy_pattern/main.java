package com.feiyu.proxy_pattern;
/**
 * 代理模式：为其他对象提供了一种代理以控制对这个对象的访问
 * 代理模式中，代理proxy和被代理者有共同的行为，实现了共同的接口，proxy持有一个引用使得代理
 * 可以访问实体，并提供一个和被代理者的接口相同的接口，这样代理就可以用来替代实体了，这个的应用
 * 我们在工厂模式，策略模式，装饰模式中都有用到它的思想
 * 具体的使用场景：
 * 一：远程代理，也就是为一个对象在不同的地址空间提供局部代表，这样可以隐藏一个对象存在于
 * 不同地址空间的事实。
 * 二：虚拟代理，是根据需要创建开销很大的对象，通过它来存放实例化需要很长时间的真是对象
 * 三：安全代理，是用来控制真是对象访问时的权限
 * 四：智能指引，是指当调用真是对象时，代理处理另外一些事。
 * 
 * 代理模式的使用，需要对一个公共的行为提供一个总代理，比如我要找房子，我不需要认识那么多的
 * 业主，我只需要认识一个中介，那么我就能找到各种各样的房子了，
 * 比如在工厂模式中，Proxy 代理了很多对象，你想要什么样的对象就有什么样的，你要潘金莲就有
 * 潘金莲，你想要西门庆就有西门庆，（额，口味略重），
 * 比如策略模式中，代理了各种算法，你想要什么样的处理就有什么样的处理，
 * 比如装饰模式中，装饰对象和操作对象拥有共同的接口，然后装饰对象的代理也就是那个Decorator
 * 持有了两边的公共接口，这样它就可以安排在它那里，想干什么就干什么。
 * @author feiyu
 *
 */
public class main {

	public static void main(String[] args) {
		RealSubject ximenqin = new RealSubject();
		Proxy proxy = new Proxy(ximenqin);
		proxy.Request();

	}

}
